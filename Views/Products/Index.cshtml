@using FipsFrontend.Helpers
@model FipsFrontend.Models.ProductsViewModel

@{
    ViewData["Title"] = Model.PageTitle;
}

@section BeforeContent {
<div class="dfe-masthead">
        <div class="govuk-width-container">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                    <h1 class="govuk-heading-xl dfe-masthead--title govuk-!-margin-bottom-0">
                        @ViewData["Title"]
                    </h1>
               
                </div>
            </div>
        </div>
    </div>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third">
        
        <!-- MOJ Filter Component -->
        <form method="get" action="/products">
            
            <div class="moj-filter" data-module="moj-filter">
                <div class="moj-filter__header">
                    <div class="moj-filter__header-title">
                        <h2 class="govuk-heading-m">Filter</h2>
                    </div>
                </div>

                <div class="moj-filter__content">
                    
                    @if (Model.SelectedFilters.Any())
                    {
                        <div class="moj-filter__selected">
                            <div class="moj-filter__selected-heading">
                                <div class="moj-filter__heading-title">
                                    <h2 class="govuk-heading-m">Selected filters</h2>
                                </div>
                                <div class="moj-filter__heading-action">
                                    <p><a class="govuk-link govuk-link--no-visited-state" href="/products">Clear filters</a></p>
                                </div>
                            </div>

                            @foreach (var filterGroup in Model.SelectedFilters.GroupBy(f => f.Category))
                            {
                                <h3 class="govuk-heading-s govuk-!-margin-bottom-0">@filterGroup.Key</h3>
                                <ul class="moj-filter-tags">
                                    @foreach (var filter in filterGroup)
                                    {
                                        <li><a class="moj-filter__tag" href="@filter.RemoveUrl"><span class="govuk-visually-hidden">Remove this filter</span> @filter.DisplayText</a></li>
                                    }
                                </ul>
                            }
                        </div>
                    }

                    <div class="moj-filter__options">
                        
                        <button type="submit" class="govuk-button" data-module="govuk-button">
                            Apply filters
                        </button>

                        <!-- Product name search -->
                        <div class="govuk-form-group">
                            <label class="govuk-label govuk-label--s" for="keywords">
                                Product name
                            </label>
                            <input class="govuk-input" id="keywords" name="keywords" type="text" value="@Model.Keywords" data-search-type="product_name">
                        </div>

                        <!-- User groups autocomplete -->
                        <div class="govuk-form-group">
                            <label class="govuk-label govuk-label--s" for="user-autocomplete">
                                User groups
                            </label>
                            <div id="user-autocomplete-container">
                                <!-- This will be replaced by accessible-autocomplete -->
                            </div>
                            <div id="user-groups-no-data" class="govuk-hint">
                                No user groups available for filtering.
                            </div>

                            <!-- Selected users will appear here as checkboxes -->
                            <div id="selected-users-container">
                                <fieldset class="govuk-fieldset">
                                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--xs">
                                        Selected user types
                                    </legend>
                                    <div class="govuk-checkboxes govuk-checkboxes--small" id="selected-users-list">
                                        <!-- Selected users will be dynamically added here -->
                                    </div>
                                </fieldset>
                            </div>
                        </div>

                        <hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible">

         

                        <!-- Business area filter -->
                        @if (Model.GroupOptions != null && Model.GroupOptions.Any())
{
    <div class="moj-filter-group">
        <button type="button"
                class="filter-toggle-button"
                data-target="group-filter"
                aria-expanded="false"
                aria-controls="group-filter"
                aria-describedby="group-filter-description">
            Business area
            <span class="filter-toggle-icon" aria-hidden="true">â–¼</span>
        </button>
        <div id="group-filter-description" class="govuk-visually-hidden">
            Click to show or hide business area filter options
        </div>

        <div id="group-filter"
             class="govuk-form-group"
             aria-hidden="true">

            <fieldset class="govuk-fieldset">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                    <span class="govuk-visually-hidden">Business area filter options</span>
                </legend>

                <div class="govuk-checkboxes govuk-checkboxes--small scrollable-filter"
                     data-module="govuk-checkboxes">

                    @foreach (var group in Model.GroupOptions)
                    {
                        var hasSubgroups = group.SubOptions?.Any() == true;
                        var groupId = $"group-{group.Value.ToLower().Replace(" ", "-")}";
                        var conditionalId = $"conditional-{groupId}";

                        <div class="govuk-checkboxes__item">
                            <input class="govuk-checkboxes__input filter-checkbox"
                                   id="@groupId"
                                   name="group"
                                   type="checkbox"
                                   value="@group.Value"
                                   data-filter-type="group"
                                   data-filter-value="@group.Value"
                                   aria-expanded="false"
                                   @(group.IsSelected ? "checked" : null)
                                   @(hasSubgroups ? Html.Raw($"data-aria-controls=\"{conditionalId}\"") : null) />

                            <label class="govuk-label govuk-checkboxes__label" for="@groupId">
                                @group.Text
                            </label>

                            @if (hasSubgroups)
                            {
                                <div class="govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden"
                                     id="@conditionalId">
                                    <div class="govuk-form-group">
                                        <fieldset class="govuk-fieldset">
                                            <legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
                                                <span class="govuk-visually-hidden">
                                                    Subgroup options for @group.Text
                                                </span>
                                            </legend>

                                            <div class="govuk-checkboxes govuk-checkboxes--small scrollable-filter"
                                                 data-module="govuk-checkboxes">

                                                @if (group.SubOptions != null)
                                                {
                                                    @foreach (var subgroup in group.SubOptions)
                                                    {
                                                        var subgroupId = $"subgroup-{subgroup.Value.ToLower().Replace(" ", "-")}";

                                                        <div class="govuk-checkboxes__item">
                                                            <input class="govuk-checkboxes__input filter-checkbox"
                                                                   id="@subgroupId"
                                                                   name="subgroup"
                                                                   type="checkbox"
                                                                   value="@subgroup.Value"
                                                               data-filter-type="subgroup"
                                                               data-filter-value="@subgroup.Value"
                                                               aria-expanded="false"
                                                               @(subgroup.IsSelected ? "checked" : null) />

                                                        <label class="govuk-label govuk-checkboxes__label" for="@subgroupId">
                                                            @subgroup.Text
                                                        </label>
                                                    </div>
                                                    }
                                                }
                                            </div>
                                        </fieldset>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </fieldset>
        </div>
    </div>
}

                        <!-- Channel filter -->
                        @if (Model.ChannelOptions != null && Model.ChannelOptions.Any())
                        {
                            <div class="moj-filter-group">
                                <button type="button" 
                                        class="filter-toggle-button" 
                                        data-target="channel-filter" 
                                        aria-expanded="false" 
                                        aria-controls="channel-filter"
                                        aria-describedby="channel-filter-description">
                                    Channel
                                    <span class="filter-toggle-icon" aria-hidden="true">â–¼</span>
                                </button>
                                <div id="channel-filter-description" class="govuk-visually-hidden">
                                    Click to show or hide Channel filter options
                                </div>
                                <div class="govuk-checkboxes govuk-checkboxes--small scrollable-filter" id="channel-filter" data-module="govuk-checkboxes" aria-hidden="true">
                                    @foreach (var channel in Model.ChannelOptions)
                                    {
                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input filter-checkbox" 
                                                   id="channel-@channel.Value.ToLower().Replace(" ", "-")" 
                                                   name="channel" 
                                                   type="checkbox" 
                                                   value="@channel.Value" 
                                                   data-filter-type="channel"
                                                   data-filter-value="@channel.Value"
                                                   @(channel.IsSelected ? "checked" : "")>
                                            <label class="govuk-label govuk-checkboxes__label" for="channel-@channel.Value.ToLower().Replace(" ", "-")">
                                                @channel.Text
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }


               <!-- Phase filter -->
                        @if (Model.PhaseOptions != null && Model.PhaseOptions.Any())
                        {
                            <div class="moj-filter-group">
                                <button type="button" 
                                        class="filter-toggle-button" 
                                        data-target="phase-filter" 
                                        aria-expanded="false" 
                                        aria-controls="phase-filter"
                                        aria-describedby="phase-filter-description">
                                    Phase
                                    <span class="filter-toggle-icon" aria-hidden="true">â–¼</span>
                                </button>
                                <div id="phase-filter-description" class="govuk-visually-hidden">
                                    Click to show or hide Phase filter options
                                </div>
                                <div class="govuk-checkboxes govuk-checkboxes--small scrollable-filter" id="phase-filter" data-module="govuk-checkboxes" aria-hidden="true">
                                    @foreach (var phase in Model.PhaseOptions)
                                    {
                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input filter-checkbox" 
                                                   id="phase-@phase.Value.ToLower().Replace(" ", "-")" 
                                                   name="phase" 
                                                   type="checkbox" 
                                                   value="@phase.Value" 
                                                   data-filter-type="phase"
                                                   data-filter-value="@phase.Value"
                                                   @(phase.IsSelected ? "checked" : "")>
                                            <label class="govuk-label govuk-checkboxes__label" for="phase-@phase.Value.ToLower().Replace(" ", "-")">
                                                @phase.Text
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Type filter -->
                        @if (Model.TypeOptions != null && Model.TypeOptions.Any())
                        {
                            <div class="moj-filter-group">
                                <button type="button" 
                                        class="filter-toggle-button" 
                                        data-target="type-filter" 
                                        aria-expanded="false" 
                                        aria-controls="type-filter"
                                        aria-describedby="type-filter-description">
                                    Type
                                    <span class="filter-toggle-icon" aria-hidden="true">â–¼</span>
                                </button>
                                <div id="type-filter-description" class="govuk-visually-hidden">
                                    Click to show or hide Type filter options
                                </div>
                                <div class="govuk-checkboxes govuk-checkboxes--small scrollable-filter" id="type-filter" data-module="govuk-checkboxes" aria-hidden="true">
                                    @foreach (var type in Model.TypeOptions)
                                    {
                                        <div class="govuk-checkboxes__item">
                                            <input class="govuk-checkboxes__input filter-checkbox" 
                                                   id="type-@type.Value.ToLower().Replace(" ", "-")" 
                                                   name="type" 
                                                   type="checkbox" 
                                                   value="@type.Value" 
                                                   data-filter-type="type"
                                                   data-filter-value="@type.Value"
                                                   @(type.IsSelected ? "checked" : "")>
                                            <label class="govuk-label govuk-checkboxes__label" for="type-@type.Value.ToLower().Replace(" ", "-")">
                                                @type.Text
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }


                    </div>
                </div>
            </div>
        </form>
    </div>

    <div class="govuk-grid-column-two-thirds">

        <!-- Results Summary -->
        <div class="govuk-!-margin-bottom-4">
         
              <p class="govuk-body">Showing @Model.StartIndex to @Model.EndIndex of @Model.FilteredCount products and services
                @if (Model.FilteredCount != Model.TotalCount)
                {
                    <text>(filtered from @Model.TotalCount total)</text>
                }
                     </p>
       
             <div class="govuk-inset-text">     
                     <p class="govuk-body">Can't find a product or service? <a class="govuk-link govuk-link--no-visited-state" href="/products/requestnewentry" rel="noopener noreferrer">Request a new entry</a> or find out <a class="govuk-link govuk-link--no-visited-state" href="/updates#add-a-missing-product-or-service">how to add one</a>.</p>
        </div>  </div>

        <!-- Products Grid -->
        @if (Model.Products.Any())
        {
            <ul class="dfe-chevron-card__list">
                @foreach (var product in Model.Products)
                {
                   
                    <li class="dfe-chevron-card">
                        <div class="dfe-chevron-card__wrapper">
                            <h3 class="govuk-heading-s govuk-!-margin-bottom-2">
                                <a class="govuk-link govuk-link--no-visited-state product-link" 
                                   href="/product/@(string.IsNullOrWhiteSpace(product.FipsId) ? product.DocumentId : product.FipsId)"
                                   data-product-title="@product.Title"
                                   data-document-id="@product.DocumentId"
                                   data-position="@(Model.StartIndex + Model.Products.ToList().IndexOf(product))">
                                    @product.Title
                                </a>
                            </h3>
                            <p class="dfe-chevron-card__description govuk-body govuk-body-s">
                                @if (!string.IsNullOrEmpty(product.ShortDescription))
                                {
                                    @(product.ShortDescription.Length > 100 ? product.ShortDescription.Substring(0, 100) + "..." : product.ShortDescription)
                                }
                                else
                                {
                                    <text>No description available</text>
                                }
                            </p>

                            <!-- Meta information -->
                            <div class="govuk-!-margin-top-2">
                                <span class="govuk-tag govuk-tag--grey govuk-!-font-size-16">@product.FipsId</span>
                                @{
                                    var phaseCategoryValue = product.CategoryValues?.FirstOrDefault(cv => 
                                        cv.CategoryType?.Name.Equals("Phase", StringComparison.OrdinalIgnoreCase) == true);
                                    var phaseDisplay = phaseCategoryValue?.Name ?? "No phase";
                                }
                                @if (phaseDisplay != "No phase")
                                {
                                    <span class="govuk-tag govuk-tag--blue govuk-!-font-size-16">@phaseDisplay</span>
                                }
                                else
                                {
                                <span class="govuk-tag govuk-tag--red govuk-!-font-size-16">@phaseDisplay</span>
                                }
                            </div>

                            <a class="dfe-chevron-card__link product-link" 
                               href="/product/@product.FipsId" 
                               aria-hidden="true" 
                               tabindex="-1"
                               data-product-title="@product.Title"
                               data-document-id="@product.DocumentId"
                               data-position="@(Model.StartIndex + Model.Products.ToList().IndexOf(product))">
                                <span class="govuk-visually-hidden">@product.Title</span>
                            </a>
                        </div>
                    </li>
                }
            </ul>
            
            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <nav class="govuk-pagination" aria-label="Pagination">
                    @if (Model.HasPreviousPage)
                    {
                        <div class="govuk-pagination__prev">
                            <a class="govuk-link govuk-pagination__link" href="@Url.Action("Index", "Products", new { 
                                keywords = Model.Keywords,
                                phase = Model.SelectedPhases,
                                group = Model.SelectedGroups,
                                subgroup = Model.SelectedSubgroups,
                                channel = Model.SelectedChannels,
                                type = Model.SelectedTypes,
                                cmdbStatus = Model.SelectedCmdbStatuses,
                                parent = Model.SelectedCmdbGroups,
                                userGroup = Model.SelectedUserGroups,
                                page = Model.CurrentPage - 1
                            })" rel="prev">
                                <svg class="govuk-pagination__icon govuk-pagination__icon--prev" xmlns="http://www.w3.org/2000/svg" height="13" width="15" aria-hidden="true" focusable="false" viewBox="0 0 15 13">
                                    <path d="m6.5938-0.0078125-6.7266 6.7266 6.7441 6.4062 1.377-1.449-4.1856-3.9768h12.896v-2h-12.984l4.2931-4.293-1.414-1.414z"></path>
                                </svg>
                                <span class="govuk-pagination__link-title">
                                    Previous<span class="govuk-visually-hidden"> page</span>
                                </span>
                            </a>
                        </div>
                    }
                    
                    <ul class="govuk-pagination__list">
                        @{
                            var startPage = Math.Max(1, Model.CurrentPage - 2);
                            var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                            
                            // Always show first page if not in range
                            if (startPage > 1)
                            {
                                <li class="govuk-pagination__item">
                                    <a class="govuk-link govuk-pagination__link" href="@Url.Action("Index", "Products", new { 
                                        keywords = Model.Keywords,
                                        phase = Model.SelectedPhases,
                                        group = Model.SelectedGroups,
                                        subgroup = Model.SelectedSubgroups,
                                        channel = Model.SelectedChannels,
                                        type = Model.SelectedTypes,
                                        cmdbStatus = Model.SelectedCmdbStatuses,
                                        parent = Model.SelectedCmdbGroups,
                                        userGroup = Model.SelectedUserGroups,
                                        page = 1
                                    })" aria-label="Page 1">
                                        1
                                    </a>
                                </li>
                                @if (startPage > 2)
                                {
                                    <li class="govuk-pagination__item govuk-pagination__item--ellipsis" aria-label="Omitted pages 2 to @(startPage - 1)">â€¦</li>
                                }
                            }
                            
                            // Show pages in range
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="govuk-pagination__item @(i == Model.CurrentPage ? "govuk-pagination__item--current" : "")">
                                    <a class="govuk-link govuk-pagination__link" href="@Url.Action("Index", "Products", new { 
                                        keywords = Model.Keywords,
                                        phase = Model.SelectedPhases,
                                        group = Model.SelectedGroups,
                                        subgroup = Model.SelectedSubgroups,
                                        channel = Model.SelectedChannels,
                                        type = Model.SelectedTypes,
                                        cmdbStatus = Model.SelectedCmdbStatuses,
                                        parent = Model.SelectedCmdbGroups,
                                        userGroup = Model.SelectedUserGroups,
                                        page = i
                                    })" aria-label="Page @i" @(i == Model.CurrentPage ? "aria-current=\"page\"" : "")>
                                        @i
                                    </a>
                                </li>
                            }
                            
                            // Always show last page if not in range
                            if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="govuk-pagination__item govuk-pagination__item--ellipsis" aria-label="Omitted pages @(endPage + 1) to @(Model.TotalPages - 1)">â€¦</li>
                                }
                                <li class="govuk-pagination__item">
                                    <a class="govuk-link govuk-pagination__link" href="@Url.Action("Index", "Products", new { 
                                        keywords = Model.Keywords,
                                        phase = Model.SelectedPhases,
                                        group = Model.SelectedGroups,
                                        subgroup = Model.SelectedSubgroups,
                                        channel = Model.SelectedChannels,
                                        type = Model.SelectedTypes,
                                        cmdbStatus = Model.SelectedCmdbStatuses,
                                        parent = Model.SelectedCmdbGroups,
                                        userGroup = Model.SelectedUserGroups,
                                        page = Model.TotalPages
                                    })" aria-label="Page @Model.TotalPages">
                                        @Model.TotalPages
                                    </a>
                                </li>
                            }
                        }
                    </ul>
                    
                    @if (Model.HasNextPage)
                    {
                        <div class="govuk-pagination__next">
                            <a class="govuk-link govuk-pagination__link" href="@Url.Action("Index", "Products", new { 
                                keywords = Model.Keywords,
                                phase = Model.SelectedPhases,
                                group = Model.SelectedGroups,
                                subgroup = Model.SelectedSubgroups,
                                channel = Model.SelectedChannels,
                                type = Model.SelectedTypes,
                                cmdbStatus = Model.SelectedCmdbStatuses,
                                parent = Model.SelectedCmdbGroups,
                                userGroup = Model.SelectedUserGroups,
                                page = Model.CurrentPage + 1
                            })" rel="next">
                                <span class="govuk-pagination__link-title">
                                    Next<span class="govuk-visually-hidden"> page</span>
                                </span>
                                <svg class="govuk-pagination__icon govuk-pagination__icon--next" xmlns="http://www.w3.org/2000/svg" height="13" width="15" aria-hidden="true" focusable="false" viewBox="0 0 15 13">
                                    <path d="m8.107-0.0078125-1.4136 1.414 4.2926 4.293h-12.986v2h12.896l-4.1855 3.9766 1.377 1.4492 6.7441-6.4062-6.7246-6.7266z"></path>
                                </svg>
                            </a>
                        </div>
                    }
                </nav>
            }
        }
        else
        {
            <div class="govuk-inset-text">
                <p class="govuk-body">No products found matching your filters.</p>
                @if (Model.SelectedFilters.Any())
                {
                    <p class="govuk-body"><a href="/products" class="govuk-link">Clear all filters</a> to see all products.</p>
                }
                else
                {
                    <p class="govuk-body"><a asp-action="Create" class="govuk-link">Add the first product</a>.</p>
                }
            </div>
        }

    </div>
</div>

@section Scripts {
    <style nonce="@Html.GetNonce()">
        /* Ensure conditional reveal styling is correct */
        .govuk-checkboxes__conditional {
            margin-left: 0;
            padding-left: 0;
        }
        
        .govuk-checkboxes__conditional .govuk-checkboxes {
            margin-top: 0;
        }
        
        .govuk-checkboxes__conditional .govuk-checkboxes__item {
            margin-bottom: 0;
        }
        
        /* Proper indentation for sub-options - wider spacing */
        .govuk-checkboxes__conditional .govuk-checkboxes__item {
            padding-left: 30px;
        }
        
        .govuk-checkboxes__conditional .govuk-checkboxes__input {
            margin-left: -30px;
        }
        
        /* Prevent focus state on children when hovering parent */
        .govuk-checkboxes__item:hover .govuk-checkboxes__conditional .govuk-checkboxes__input:focus {
            outline: none;
        }
        
        .govuk-checkboxes__item:hover .govuk-checkboxes__conditional .govuk-checkboxes__input:focus-visible {
            outline: 3px solid #fd0;
            outline-offset: 0;
        }
        
        /* Autocomplete hierarchical styling */
        .autocomplete-suggestion {
            padding: 8px 12px;
            border-bottom: 1px solid #e5e5e5;
        }
        
        .autocomplete-suggestion:last-child {
            border-bottom: none;
        }
        
        .autocomplete-child-name {
            font-size: 16px;
            color: #0b0c0c;
        }
        
        .autocomplete-parent-name {
            font-size: 16px;
            color: #505a5f;
            margin-top: 2px;
        }
        
        .autocomplete-child-count {
            font-size: 16px;
            color: #505a5f;
            margin-top: 2px;
        }
        
        .autocomplete-add-all {
            background-color: #f3f2f1;
            border-bottom: 2px solid #0b0c0c;
            font-weight: 600;
        }
        
        .autocomplete-add-all-text {
            color: #0b0c0c;
        }
        
        /* Inline styles moved here for CSP compliance */
        #user-groups-no-data {
            display: none;
        }
        
        #selected-users-container {
            margin-top: 15px;
            display: none;
        }
        
        #phase-filter {
            display: none;
        }
        
        #channel-filter {
            display: none;
        }
        
        #type-filter {
            display: none;
        }
        
        #group-filter {
            display: none;
        }
        
        /* Filter toggle button styling */
        .filter-toggle-button {
            background: none;
            border: none;
            padding: 10px 0;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            color: #0b0c0c;
            text-align: left;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .filter-toggle-button:hover {
            background-color: #f3f2f1;
        }
        
        .filter-toggle-button:focus {
            outline: 3px solid #fd0;
            outline-offset: 0;
            background-color: #fd0;
            text-decoration: underline;
            text-decoration-thickness: 3px;
            text-underline-offset: 2px;
        }
        
        .filter-toggle-icon {
            font-size: 14px;
            transition: transform 0.2s ease;
        }
        
    
        
        .moj-filter-group:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }
    </style>
    <script nonce="@Html.GetNonce()">
        console.log('Products Index JavaScript starting...');
        
        // Google Analytics Event Tracking Functions
        function trackGAEvent(eventName, parameters = {}) {
            console.log('Attempting to track GA event:', eventName, parameters);
            
            if (typeof gtag !== 'undefined') {
                console.log('Using gtag for GA4');
                gtag('event', eventName, parameters);
            } else if (typeof ga !== 'undefined') {
                console.log('Using ga for Universal Analytics');
                ga('send', 'event', parameters.category || 'User Interaction', eventName, parameters.label || '', parameters.value || 0);
            } else {
                console.error('Google Analytics not loaded - gtag and ga are undefined');
                console.log('Available globals:', Object.keys(window).filter(key => key.includes('google') || key.includes('gtag') || key.includes('ga')));
            }
            
            // Also log to dataLayer for debugging
            if (window.dataLayer) {
                console.log('dataLayer exists, current length:', window.dataLayer.length);
            } else {
                console.error('dataLayer not found');
            }
        }

        // Microsoft Clarity Event Tracking Functions
        function trackClarityEvent(eventName, parameters = {}) {
            console.log('Attempting to track Clarity event:', eventName, parameters);
            
            if (typeof clarity !== 'undefined') {
                // Send the main event
                clarity('event', eventName);
                
                // Set custom tags for additional context
                if (parameters.event_category) {
                    clarity('set', 'event_category', parameters.event_category);
                }
                if (parameters.event_label) {
                    clarity('set', 'event_label', parameters.event_label);
                }
                if (parameters.product_id) {
                    clarity('set', 'product_id', parameters.product_id);
                }
                if (parameters.filter_type) {
                    clarity('set', 'filter_type', parameters.filter_type);
                }
                if (parameters.search_term) {
                    clarity('set', 'search_term', parameters.search_term);
                }
                
                console.log('Clarity Event tracked:', eventName, parameters);
            } else {
                console.log('Clarity not available');
            }
        }

        // Combined tracking function for both GA and Clarity
        function trackEvent(eventName, parameters = {}) {
            trackGAEvent(eventName, parameters);
            trackClarityEvent(eventName, parameters);
        }

        function trackProductClick(productTitle, documentId, position, searchTerm = '', activeFilters = []) {
            trackEvent('product_click', {
                event_category: 'Product Interaction',
                event_label: productTitle,
                product_id: documentId,
                product_position: position,
                search_term: searchTerm,
                active_filters: activeFilters.join(', '),
                custom_parameter_1: documentId,
                custom_parameter_2: position.toString()
            });
        }

        function trackFilterApplication(filterType, filterValue, action = 'applied') {
            trackEvent('filter_' + action, {
                event_category: 'Filter Interaction',
                filter_type: filterType,
                filter_value: filterValue,
                event_label: filterType + ': ' + filterValue
            });
        }

        function trackSearch(searchTerm, searchType = 'product_name') {
            if (searchTerm && searchTerm.trim().length > 0) {
                trackEvent('search', {
                    event_category: 'Search',
                    search_term: searchTerm.trim(),
                    search_type: searchType,
                    event_label: searchType + ': ' + searchTerm.trim()
                });
            }
        }

        function trackPagination(direction, currentPage, totalPages) {
            trackEvent('pagination_' + direction, {
                event_category: 'Navigation',
                current_page: currentPage,
                total_pages: totalPages,
                event_label: direction + ' from page ' + currentPage
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded - starting initialization...');
            
            // User groups data passed from controller (hierarchical)
            let userGroupsData = [];
            try {
                const rawData = @Html.Raw(Json.Serialize(Model.UserGroupOptions?.Select(u => new { 
                    id = u.Value, 
                    label = u.Text.Replace(" (" + u.Count + ")", ""),
                    count = u.Count,
                    searchText = u.Text.Replace(" (" + u.Count + ")", "").ToLower(),
                    parentName = u.ParentName,
                    hasChildren = u.HasChildren,
                    childCount = u.ChildCount
                }) ?? Enumerable.Empty<object>()));
                
                userGroupsData = rawData || [];
                console.log('User groups data loaded:', userGroupsData.length, 'items');
                console.log('Raw user groups data:', userGroupsData);
                
                // If no data, show a message
                if (userGroupsData.length === 0) {
                    console.warn('No user groups data available');
                    const noDataElement = document.getElementById('user-groups-no-data');
                    if (noDataElement) {
                        noDataElement.style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error loading user groups data:', error);
                userGroupsData = [];
            }
            
            // Array to store selected users
            let selectedUsers = [];
            
            // Parse existing selections from URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const existingUsers = urlParams.getAll('userGroup');
            if (existingUsers.length > 0) {
                existingUsers.forEach(userId => {
                    const user = userGroupsData.find(u => u.id === userId);
                    if (user) {
                        selectedUsers.push(user);
                    }
                });
                updateSelectedUsersDisplay();
            }
            
            // Function to update the displayed selected users
            function updateSelectedUsersDisplay() {
                const container = document.getElementById('selected-users-container');
                const list = document.getElementById('selected-users-list');
                
                if (selectedUsers.length === 0) {
                    container.style.display = 'none';
                    return;
                }
                
                container.style.display = 'block';
                list.innerHTML = '';
                
                selectedUsers.forEach((user, index) => {
                    const checkboxItem = document.createElement('div');
                    checkboxItem.className = 'govuk-checkboxes__item';
                    
                    const checkbox = document.createElement('input');
                    checkbox.className = 'govuk-checkboxes__input';
                    checkbox.type = 'checkbox';
                    checkbox.name = 'userGroup';
                    checkbox.value = user.id;
                    checkbox.id = 'user-' + index;
                    checkbox.checked = true;
                    
                    const label = document.createElement('label');
                    label.className = 'govuk-label govuk-checkboxes__label';
                    label.setAttribute('for', 'user-' + index);
                    label.textContent = user.label;
                    
                    checkboxItem.appendChild(checkbox);
                    checkboxItem.appendChild(label);
                    list.appendChild(checkboxItem);
                });
            }
            
            // Function to add a user to the selected list
            function addUser(user) {
                // Check if user is already selected
                const alreadySelected = selectedUsers.some(u => u.id === user.id);
                if (!alreadySelected) {
                    selectedUsers.push(user);
                    updateSelectedUsersDisplay();
                }
            }

            // Custom search function that filters by labels
            function source(query, populateResults) {
                console.log('Source function called with query:', query);
                console.log('Available userGroupsData:', userGroupsData.length, 'items');
                
                if (!query || query.length < 2) {
                    populateResults([]);
                    return;
                }
                
                const searchTerm = query.toLowerCase();
                console.log('Searching for:', searchTerm);
                
                const filteredResults = userGroupsData.filter(function(item) {
                    // Exclude already selected users
                    const alreadySelected = selectedUsers.some(u => u.id === item.id);
                    if (alreadySelected) return false;
                    
                    const matches = item.searchText.includes(searchTerm);
                    if (matches) {
                        console.log('Match found:', item.label, 'parentName:', item.parentName, 'hasChildren:', item.hasChildren, 'childCount:', item.childCount);
                    }
                    return matches;
                }).sort(function(a, b) {
                    // Sort alphabetically by label
                    return a.label.localeCompare(b.label);
                });
                
                console.log('Filtered results:', filteredResults.length);
                
                // Add "Add all" option at the top if there are results
                const results = [];
                if (filteredResults.length > 0) {
                    results.push({
                        id: 'add-all',
                        label: `Add all ${filteredResults.length} user groups`,
                        isAddAll: true,
                        count: filteredResults.length
                    });
                }
                
                // Add the actual results (limit to 14 to make room for "Add all")
                results.push(...filteredResults.slice(0, 14));
                populateResults(results);
            }
            
            // Check if accessible autocomplete is available
            if (typeof accessibleAutocomplete === 'undefined') {
                console.error('Accessible autocomplete library not loaded');
                // Create fallback input
                const container = document.getElementById('user-autocomplete-container');
                container.innerHTML = '<input class="govuk-input" type="text" id="user-fallback" name="userGroup" placeholder="Start typing to search user groups...">';
                return;
            }
            
            try {
                console.log('Initializing accessible autocomplete...');
                console.log('Container element:', document.querySelector('#user-autocomplete-container'));
                console.log('User groups data available:', userGroupsData.length);
                
                // Don't initialize if no data
                if (userGroupsData.length === 0) {
                    console.log('No user groups data, skipping autocomplete initialization');
                    const noDataElement = document.getElementById('user-groups-no-data');
                    if (noDataElement) {
                        noDataElement.style.display = 'block';
                    }
                    return;
                }
                
                // Initialize accessible autocomplete
                accessibleAutocomplete({
                    element: document.querySelector('#user-autocomplete-container'),
                    id: 'user-autocomplete',
                    name: 'user-display', // Different name to avoid conflict
                    source: source,
                    minLength: 2,
                            templates: {
                                inputValue: function(suggestion) {
                                    return suggestion && suggestion.label ? suggestion.label : suggestion;
                                },
                                suggestion: function(suggestion) {
                                    console.log('Template suggestion called with:', suggestion);
                                    if (suggestion && suggestion.label) {
                                        if (suggestion.isAddAll) {
                                            // Show "Add all" option with special styling
                                            return `<div class="autocomplete-suggestion autocomplete-add-all">
                                                <div class="autocomplete-add-all-text">${suggestion.label}</div>
                                            </div>`;
                                        } else if (suggestion.parentName) {
                                            // Show child name as main text, parent as meta
                                            console.log('Rendering child with parent:', suggestion.label, suggestion.parentName);
                                            // Extract just the child name without the parent in brackets
                                            const childName = suggestion.label.replace(/\s*\([^)]*\)$/, '');
                                            return `<div class="autocomplete-suggestion">
                                                <div class="autocomplete-child-name">${childName}</div>
                                                <div class="autocomplete-parent-name">${suggestion.parentName}</div>
                                            </div>`;
                                        } else if (suggestion.hasChildren && suggestion.childCount > 0) {
                                            // Show parent name with child count - treat like child entries for consistency
                                            console.log('Rendering parent with children:', suggestion.label, suggestion.childCount);
                                            return `<div class="autocomplete-suggestion">
                                                <div class="autocomplete-child-name">${suggestion.label}</div>
                                                <div class="autocomplete-parent-name">${suggestion.childCount} sub user-groups</div>
                                            </div>`;
                                        } else {
                                            // Show just the main text, no meta
                                            console.log('Rendering simple entry:', suggestion.label);
                                            return `<div class="autocomplete-suggestion">
                                                <div class="autocomplete-parent-name">${suggestion.label}</div>
                                            </div>`;
                                        }
                                    }
                                    return suggestion;
                                }
                            },
                    onConfirm: function(confirmed) {
                        if (confirmed && confirmed.id) {
                            if (confirmed.isAddAll) {
                                // Add all filtered results
                                const searchTerm = document.querySelector('#user-autocomplete')?.value?.toLowerCase() || '';
                                const filteredResults = userGroupsData.filter(function(item) {
                                    const alreadySelected = selectedUsers.some(u => u.id === item.id);
                                    if (alreadySelected) return false;
                                    return item.searchText.includes(searchTerm);
                                });
                                
                                filteredResults.forEach(function(item) {
                                    addUser(item);
                                });
                                
                                // Clear input and close dropdown
                                setTimeout(function() {
                                    const input = document.querySelector('#user-autocomplete');
                                    if (input) {
                                        input.value = '';
                                        input.blur();
                                    }
                                }, 100);
                            } else {
                                addUser(confirmed);
                                // Clear input and keep dropdown open
                                setTimeout(function() {
                                    const input = document.querySelector('#user-autocomplete');
                                    if (input) {
                                        input.value = '';
                                        input.focus();
                                        // Trigger a new search with empty value to close dropdown
                                        const event = new Event('input', { bubbles: true });
                                        input.dispatchEvent(event);
                                    }
                                }, 100);
                            }
                        } else if (typeof confirmed === 'string') {
                            // Handle case where user types something that doesn't match
                            const match = userGroupsData.find(function(user) {
                                return user.label.toLowerCase() === confirmed.toLowerCase();
                            });
                            if (match) {
                                addUser(match);
                                // Clear input and keep dropdown open
                                setTimeout(function() {
                                    const input = document.querySelector('#user-autocomplete');
                                    if (input) {
                                        input.value = '';
                                        input.focus();
                                        const event = new Event('input', { bubbles: true });
                                        input.dispatchEvent(event);
                                    }
                                }, 100);
                            }
                        }
                    },
                    showNoOptionsFound: true,
                    showAllValues: false,
                    displayMenu: 'overlay',
                    placeholder: ''
                });
                
                console.log('Accessible autocomplete initialized successfully');
            } catch (error) {
                console.error('Error initializing autocomplete:', error);
                // Create fallback input on error
                const container = document.getElementById('user-autocomplete-container');
                container.innerHTML = '<input class="govuk-input" type="text" id="user-fallback" name="userGroup" placeholder="Start typing to search user groups...">';
            }

            // Initialize MOJ filter
            if (typeof moj !== 'undefined' && moj.Modules && moj.Modules.Filter) {
                new moj.Modules.Filter();
            }

            // Initialize filter toggles
            document.querySelectorAll('.filter-toggle-button').forEach(function(button) {
                button.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const target = document.getElementById(targetId);
                    
                    if (target) {
                        const isExpanded = this.getAttribute('aria-expanded') === 'true';
                        
                        if (isExpanded) {
                            // Collapse
                            target.style.display = 'none';
                            target.setAttribute('aria-hidden', 'true');
                            this.setAttribute('aria-expanded', 'false');
                            // Update icon
                            const icon = this.querySelector('.filter-toggle-icon');
                            if (icon) {
                                icon.textContent = 'â–¼';
                            }
                        } else {
                            // Expand
                            target.style.display = 'block';
                            target.setAttribute('aria-hidden', 'false');
                            this.setAttribute('aria-expanded', 'true');
                            // Update icon
                            const icon = this.querySelector('.filter-toggle-icon');
                            if (icon) {
                                icon.textContent = 'â–²';
                            }
                        }
                    }
                });

                // Handle keyboard navigation
                button.addEventListener('keydown', function(event) {
                    if (event.key === 'Enter' || event.key === ' ') {
                        event.preventDefault();
                        this.click();
                    }
                });
            });

            // Product link tracking
            document.querySelectorAll('.product-link').forEach(function(link) {
                link.addEventListener('click', function(e) {
                    const productTitle = this.getAttribute('data-product-title');
                    const documentId = this.getAttribute('data-document-id');
                    const position = this.getAttribute('data-position');
                    const searchTerm = document.getElementById('keywords')?.value || '';
                    
                    // Get active filters
                    const activeFilters = [];
                    document.querySelectorAll('.filter-checkbox:checked').forEach(function(checkbox) {
                        const filterType = checkbox.getAttribute('data-filter-type');
                        const filterValue = checkbox.getAttribute('data-filter-value');
                        if (filterType && filterValue) {
                            activeFilters.push(filterType + ':' + filterValue);
                        }
                    });
                    
                    trackProductClick(productTitle, documentId, position, searchTerm, activeFilters);
                });
            });

            // Filter checkbox tracking
            document.querySelectorAll('.filter-checkbox').forEach(function(checkbox) {
                checkbox.addEventListener('change', function() {
                    const filterType = this.getAttribute('data-filter-type');
                    const filterValue = this.getAttribute('data-filter-value');
                    const action = this.checked ? 'applied' : 'removed';
                    
                    trackFilterApplication(filterType, filterValue, action);
                });
            });

            // Search input tracking (on form submit)
            const searchForm = document.querySelector('form[method="get"]');
            if (searchForm) {
                searchForm.addEventListener('submit', function(e) {
                    const searchInput = document.getElementById('keywords');
                    if (searchInput && searchInput.value.trim()) {
                        trackSearch(searchInput.value.trim(), 'product_name');
                    }
                });
            }

            // Pagination tracking
            document.querySelectorAll('.govuk-pagination__link').forEach(function(link) {
                link.addEventListener('click', function(e) {
                    const href = this.getAttribute('href');
                    const currentPage = @Model.CurrentPage;
                    const totalPages = @Model.TotalPages;
                    
                    if (this.classList.contains('govuk-pagination__link--prev') || this.textContent.includes('Previous')) {
                        trackPagination('previous', currentPage, totalPages);
                    } else if (this.classList.contains('govuk-pagination__link--next') || this.textContent.includes('Next')) {
                        trackPagination('next', currentPage, totalPages);
                    } else if (this.textContent.match(/^\d+$/)) {
                        trackPagination('page_' + this.textContent, currentPage, totalPages);
                    }
                });
            });

            // Clear filters tracking
            document.querySelectorAll('a[href="/products"]').forEach(function(link) {
                if (link.textContent.includes('Clear')) {
                    link.addEventListener('click', function(e) {
                        trackEvent('clear_filters', {
                            event_category: 'Filter Interaction',
                            event_label: 'Clear all filters'
                        });
                    });
                }
            });

            // Track page load with current filters
            const currentSearchTerm = document.getElementById('keywords')?.value || '';
            if (currentSearchTerm) {
                trackSearch(currentSearchTerm, 'product_name');
            }
            
            // Track current active filters on page load
            document.querySelectorAll('.filter-checkbox:checked').forEach(function(checkbox) {
                const filterType = checkbox.getAttribute('data-filter-type');
                const filterValue = checkbox.getAttribute('data-filter-value');
                if (filterType && filterValue) {
                    trackFilterApplication(filterType, filterValue, 'loaded');
                }
            });

            // Test GA connection on page load
            setTimeout(function() {
                trackEvent('page_view_test', {
                    event_category: 'Test',
                    event_label: 'Products Index Page Load',
                    page_title: '@Model.PageTitle',
                    test_timestamp: new Date().toISOString()
                });
            }, 1000);

            // Ensure GOV.UK checkboxes are initialized after MOJ filter is shown
            setTimeout(function() {
                const checkboxContainers = document.querySelectorAll('[data-module="govuk-checkboxes"]');
                checkboxContainers.forEach(function(container) {
                    if (typeof window.GOVUKFrontend !== 'undefined' && window.GOVUKFrontend.Checkboxes) {
                        new window.GOVUKFrontend.Checkboxes(container);
                    }
                });
            }, 2000);
    
        });
    </script>
}