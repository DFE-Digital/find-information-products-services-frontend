@model FipsFrontend.Models.ProductCategoriesViewModel
@{
    ViewData["Title"] = $"{Model.Product.Title} - Categories";
}

@section BeforeContent {
       <div class="dfe-masthead dfe-masthead--with-links govuk-!-padding-bottom-3 govuk-!-margin-bottom-3">
        <div class="govuk-width-container">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-full">
                    <a href="@GetBackLink()" class="govuk-back-link">@GetBackLinkText()</a>
                    <h1 class="govuk-heading-l dfe-masthead--title">
                        @Model.Product.Title
                    </h1>
                    <table class="govuk-table">
                        <thead class="govuk-table__head">
                            <tr class="govuk-table__row">
                                <th class="govuk-table__header govuk-!-width-one-quarter">ID</th>
                                <th class="govuk-table__header govuk-!-width-one-quarter">Phase</th>
                                <th class="govuk-table__header govuk-!-width-one-quarter">Business area</th>
                                <th class="govuk-table__header govuk-!-width-one-quarter">Contacts</th>
                            </tr>
                        </thead>
                        <tbody class="govuk-table__body">
                            <tr class="govuk-table__row">
                                <td class="govuk-table__cell">
                                    <span class="govuk-visually-hidden">UniqueID: </span>
                                    <span title="@(Model.Product.FipsId ?? Model.Product.DocumentId)">@(Model.Product.FipsId ?? Model.Product.DocumentId?.Substring(0, Math.Min(6, Model.Product.DocumentId?.Length ?? 0)))</span>
                                </td>
                                <td class="govuk-table__cell">
                                    <span class="govuk-visually-hidden">Phase: </span>
                                    @{
                                        var phaseCategory = Model.Product.CategoryValues?.FirstOrDefault(cv => cv.CategoryType?.Name?.Equals("Phase", StringComparison.OrdinalIgnoreCase) == true);
                                    }
                                    @if (phaseCategory != null)
                                    {
                                        <strong class="govuk-tag govuk-tag--blue">@phaseCategory.Name</strong>
                                    }
                                </td>
                                <td class="govuk-table__cell">
                                    <span class="govuk-visually-hidden">Group: </span>
                                    @{
                                        var businessAreaCategory = Model.Product.CategoryValues?.FirstOrDefault(cv => cv.CategoryType?.Name?.Equals("Group", StringComparison.OrdinalIgnoreCase) == true);
                                    }
                                    @if (businessAreaCategory != null)
                                    {
                                        @businessAreaCategory.Name
                                    }
                                </td>
                                <td class="govuk-table__cell">
                                    @if (Model.Product.ProductContacts?.Any() == true)
                                    {
                                        <a href="#contacts" class="govuk-link" rel="noopener noreferrer">@Model.Product.ProductContacts.Count contacts</a>
                                    }
                                    else
                                    {
                                        <span>0 contacts</span>
                                    }
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-quarter">
        <nav aria-label="Components Menu" class="dfe-vertical-nav">
            <button type="button" class="dfe-vertical-nav__toggle dfe-js-vertical-nav-toggle" aria-controls="side-navigation" hidden="" aria-expanded="false">
                Product navigation
            </button>
            <ul class="dfe-vertical-nav__section" id="side-navigation">
                <li class="dfe-vertical-nav__section-item">
                    <a class="dfe-vertical-nav__link govuk-link govuk-link--no-visited-state govuk-link--no-underline" href="/product/@(Model.Product.FipsId ?? Model.Product.DocumentId)">Overview</a>
                </li>
                <li class="dfe-vertical-nav__section-item dfe-vertical-nav__section-item--current">
                    <a class="dfe-vertical-nav__link govuk-link govuk-link--no-visited-state govuk-link--no-underline" href="/product/@(Model.Product.FipsId ?? Model.Product.DocumentId)/categories">Categories</a>
                </li>
                @if (ViewData["AssuranceEnabled"] as bool? == true)
                {
                    <li class="dfe-vertical-nav__section-item">
                        <a class="dfe-vertical-nav__link govuk-link govuk-link--no-visited-state govuk-link--no-underline" href="/product/@(Model.Product.FipsId ?? Model.Product.DocumentId)/assurance">Assurance</a>
                    </li>
                }
                @if (ViewData["EditProductEnabled"] as bool? == true)
                {
                    <li class="dfe-vertical-nav__section-item">
                        <a class="dfe-vertical-nav__link govuk-link govuk-link--no-visited-state govuk-link--no-underline" href="/product/@(Model.Product.FipsId ?? Model.Product.DocumentId)/ProposeChange">Propose a change</a>
                    </li>
                }
            </ul>
        </nav>
    </div>


   <div class="govuk-grid-column-three-quarters">

   @{
       var userGroupCategories = Model.CategoryInfo.Where(c => c.CategoryTypeName?.Equals("User group", StringComparison.OrdinalIgnoreCase) == true).ToList();
       var otherCategories = Model.CategoryInfo.Where(c => !c.CategoryTypeName?.Equals("User group", StringComparison.OrdinalIgnoreCase) == true).ToList();
   }

   <h2 class="govuk-heading-m">Categories</h2>
   <p class="govuk-body">This product has been assigned with the following categories:</p>
        
        @if (otherCategories.Any())
        {
            <table class="govuk-table">
                <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th scope="col" class="govuk-table__header">Name</th>
                        <th scope="col" class="govuk-table__header">Type</th>
                        <th scope="col" class="govuk-table__header">Description</th>
                    </tr>
                </thead>
                <tbody class="govuk-table__body">
                    @foreach (var categoryInfo in otherCategories)
                    {
                        @for (int i = 0; i < categoryInfo.CategoryValueNames.Count; i++)
                        {
                            <tr class="govuk-table__row">
                                <td class="govuk-table__cell">
                                    <a href="/products?@GetFilterParameter(categoryInfo.CategoryTypeName, categoryInfo.CategoryValueSlugs[i])" class="govuk-link govuk-link--no-visited-state">
                                        @categoryInfo.CategoryValueNames[i]
                                    </a>
                                </td>
                                <td class="govuk-table__cell">
                                    @categoryInfo.CategoryTypeName
                                </td>
                                <td class="govuk-table__cell">
                                    @categoryInfo.CategoryValueDescriptions[i]
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="govuk-inset-text">
                <p>No categories are currently assigned to this product.</p>
            </div>
        }

        @if (userGroupCategories.Any())
        {
            // Flatten and sort user groups alphabetically
            var userGroups = userGroupCategories
                .SelectMany(categoryInfo => categoryInfo.CategoryValueNames
                    .Select((name, index) => new { 
                        Name = name, 
                        Slug = categoryInfo.CategoryValueSlugs[index],
                        CategoryTypeName = categoryInfo.CategoryTypeName
                    }))
                .OrderBy(ug => ug.Name)
                .ToList();
            
            <h2 class="govuk-heading-m govuk-!-margin-top-6">Users of this product</h2>
            <p class="govuk-body">This product has been assigned with the following user groups as users of the product.</p>
            <table class="govuk-table">
                <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th scope="col" class="govuk-table__header">Name</th>
                    </tr>
                </thead>
                <tbody class="govuk-table__body">
                    @foreach (var userGroup in userGroups)
                    {
                        <tr class="govuk-table__row">
                            <td class="govuk-table__cell">
                                <a href="/products?@GetFilterParameter(userGroup.CategoryTypeName, userGroup.Slug)" class="govuk-link govuk-link--no-visited-state">
                                    @userGroup.Name
                                </a>
                            </td>                               
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@functions {
    public string GetBackLink()
    {
        // Check if there's a referrer and if it's from the products page with filters
        var referrer = Context.Request.Headers["Referer"].FirstOrDefault();
        
        if (!string.IsNullOrEmpty(referrer) && 
            referrer.Contains("/products") && 
            (referrer.Contains("?") || referrer.Contains("&")))
        {
            // User came from products page with filters - preserve them
            return referrer;
        }
        
        // Default back to products page
        return "/products";
    }
    
    public string GetBackLinkText()
    {
        var referrer = Context.Request.Headers["Referer"].FirstOrDefault();
        
        if (!string.IsNullOrEmpty(referrer) && 
            referrer.Contains("/products") && 
            (referrer.Contains("?") || referrer.Contains("&")))
        {
            return "Back to results";
        }
        
        return "Back to products";
    }
    
    public string GetFilterParameter(string categoryTypeName, string slug)
    {
        return categoryTypeName.ToLower() switch
        {
            "phase" => $"phase={slug}",
            "channel" => $"channel={slug}",
            "type" => $"type={slug}",
            "group" => $"group={slug}",
            "user group" => $"userGroup={slug}",
            _ => $"category={slug}"
        };
    }
}
